// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  role         String    @default("user")
  email         String?   @unique
  emailVerified DateTime?
  phoneNumber  String?
  image         String?
  description   String?
  url           String?
  createdAt     DateTime  @default(now())
  dog_profiles DogProfile[]
  account    Account[]
  session    Session[]
  appointments Appointments[]
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DogProfile { 
  id            String    @id @default(cuid())
  name          String
  aggressive   Boolean
  breed         String
  age           Int
  weight        Int
  special_instructions   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  appointments  Appointments[]
}
model Appointments {
  id            String    @id @default(cuid())
  name         String
  type          String
  date         String
  phone        String
  dog          DogProfile @relation(fields: [dogId], references: [id])
  dogId        String
  deposit       Int?
  specialNotes  String?
  location   String?
  pending      Boolean
  cancelled    Boolean
  completed    Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}